{"version":3,"sources":["dashboard/duck/reduxSlice.js","dashboard/duck/operations.js","dashboard/DashboardComponent.jsx","dashboard/DashboardContainer.js","App.js","reportWebVitals.js","reduxStore.js","index.js"],"names":["counterSlice","createSlice","name","initialState","launches","reducers","fetchLaunchData","state","action","console","log","payload","actions","dispatch","fetch","then","response","json","data","catch","error","DashboardComponent","props","this","getLaunchData","className","Component","connect","dashoard","count","getLaunches","dashboardOperations","App","DashboardContainer","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","configureStore","reducer","dashoardReducer","ReactDOM","render","store","document","getElementById"],"mappings":"iNAEaA,EAAeC,YAAY,CACtCC,KAAM,YACNC,aAAc,CACZC,SAAU,IAEZC,SAAU,CACRC,gBAAiB,SAACC,EAAOC,GACvBC,QAAQC,IAAIF,EAAOG,SACnBJ,EAAMH,SAAN,YAAqBI,EAAOG,aAKpBL,EAAoBN,EAAaY,QAAjCN,gBAECN,IAAf,QCHe,EAVK,kBAAM,SAACa,GACzBC,MAAM,0CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAI,OAAIL,EAASP,EAAgBY,OACtCC,OAAM,SAAAC,GACLX,QAAQW,MAAMA,Q,qCCNCC,E,kDACnB,WAAYC,GAAQ,uCACZA,G,qDAER,WACEC,KAAKD,MAAME,kB,oBAEb,WACE,IACEpB,EACEmB,KAAKD,MADPlB,SAGF,OADAK,QAAQC,IAAI,WAAYN,GAEtB,qBAAKqB,UAAU,MAAf,SACE,wD,GAdwCC,aCwBjCC,eAvBS,SAACpB,GACvB,MAGIA,EAAMqB,SAEV,MAAO,CACLC,MANF,EACEA,MAMAzB,SAPF,EAEEA,aASuB,SAACS,GAC1B,IACEiB,EACEC,EAGJ,MAAO,CACLP,cAAe,kBAAMX,EAASiB,SAInBH,CAA6CN,G,MCd7CW,MARf,WACE,OACE,qBAAKP,UAAU,MAAf,SACE,cAACQ,EAAD,OCISC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBrB,MAAK,YAAkD,IAA/CsB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCJCO,cAAe,CAC5BC,QAAS,CACPf,SAAUgB,KCGdC,IAASC,OACP,cAAC,aAAD,UACE,cAAC,IAAD,CAAUC,MAAOA,EAAjB,SACE,cAAC,EAAD,QAGJC,SAASC,eAAe,SAM1Bf,M","file":"static/js/main.c6428c9c.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\n\nexport const counterSlice = createSlice({\n  name: 'dashboard',\n  initialState: {\n    launches: []\n  },\n  reducers: {\n    fetchLaunchData: (state, action) => {\n      console.log(action.payload);\n      state.launches = [...action.payload]\n    }\n  },\n})\n\nexport const {fetchLaunchData } = counterSlice.actions\n\nexport default counterSlice.reducer","import {\n  fetchLaunchData\n} from './reduxSlice';\n\nconst getLaunches = () => (dispatch) => {\n  fetch('https://api.spacexdata.com/v3/launches')\n    .then(response => response.json())\n    .then(data => dispatch(fetchLaunchData(data)))\n    .catch(error => {\n      console.error(error);\n    });\n};\n\n\nexport default {\n  getLaunches\n}\n","\nimport React, { Component } from 'react';\n\nexport default class DashboardComponent extends Component {\n  constructor(props) {\n    super(props);\n  }\n  componentDidMount() {\n    this.props.getLaunchData();\n  }\n  render() {\n    const {\n      launches\n    } = this.props;\n    console.log('launches', launches)\n    return (\n      <div className='App'>\n        <h1>SpaceX Launches!</h1>\n      </div>\n    );\n  }\n}\n\n\n\n// export default App;\n","import { connect } from 'react-redux';\nimport dashboardOperations from './duck/operations';\nimport DashboardComponent from './DashboardComponent';\n\nconst mapStateToProps = (state) => {\n  const {\n    count,\n    launches\n  } = state.dashoard;\n\n  return {\n    count,\n    launches\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  const {\n    getLaunches\n  } = dashboardOperations;\n  // const getLaunchData = \n\n  return {\n    getLaunchData: () => dispatch(getLaunches())\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(DashboardComponent);\n","\nimport React from 'react';\nimport DashboardContainer from './dashboard/DashboardContainer';\nimport './styles.css';\n\nfunction App() {\n  return (\n    <div className='App'>\n      <DashboardContainer />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { configureStore } from '@reduxjs/toolkit';\nimport dashoardReducer from './dashboard/duck/reduxSlice';\n\nexport default configureStore({\n  reducer: {\n    dashoard: dashoardReducer\n  },\n})","import React, {StrictMode} from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux';\nimport store from './reduxStore';\n\nReactDOM.render(\n  <StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}