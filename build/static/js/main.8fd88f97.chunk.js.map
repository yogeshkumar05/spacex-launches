{"version":3,"sources":["dashboard/duck/reduxSlice.js","utils/constants.js","dashboard/styles.js","dashboard/DashboardTile.jsx","dashboard/DashboardComponent.jsx","dashboard/DashboardContainer.js","dashboard/duck/operations.js","App.js","reportWebVitals.js","reduxStore.js","index.js"],"names":["counterSlice","createSlice","name","initialState","launches","reducers","fetchLaunchData","state","action","console","log","payload","actions","constants","FLIGHT_NUMBER","LAUNCH_DATE","LAUNCH_STATUS","DEFAULT_IMG_URL","SUCCESS","FAILURE","cardStyles","makeStyles","theme","root","width","marginBottom","cardContainer","display","justifyContent","media","height","paddingTop","DashboardTile","props","launchData","flight_number","details","launch_date_unix","launch_success","mission_name","flickr_images","links","classes","subHeader","className","Card","CardHeader","title","subheader","CardMedia","image","CardContent","Typography","variant","color","component","DashboardComponent","this","getLaunchData","map","launch","Component","connect","dashoard","count","dispatch","fetch","then","response","json","data","catch","error","App","DashboardContainer","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","configureStore","reducer","dashoardReducer","ReactDOM","render","store","document","getElementById"],"mappings":"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","file":"static/js/main.8fd88f97.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\n\nexport const counterSlice = createSlice({\n  name: 'dashboard',\n  initialState: {\n    launches: []\n  },\n  reducers: {\n    fetchLaunchData: (state, action) => {\n      console.log(action.payload);\n      state.launches = [...action.payload]\n    }\n  },\n})\n\nexport const {fetchLaunchData } = counterSlice.actions\n\nexport default counterSlice.reducer","const constants = {\n  FLIGHT_NUMBER: 'Flight number',\n  LAUNCH_DATE: 'Launch date',\n  LAUNCH_STATUS: 'Launch status',\n  DEFAULT_IMG_URL: 'https://live.staticflickr.com/65535/50291453997_aa715950e7_o.jpg',\n  SUCCESS: 'Successs',\n  FAILURE: 'Failuress'\n}\n\nexport default constants;","import { makeStyles } from '@material-ui/core/styles';\n\nexport const cardStyles = makeStyles((theme) => ({\n  root: {\n    width: 500,\n    marginBottom: 30\n  },\n  cardContainer: {\n    display: 'flex',\n    justifyContent: 'center'\n  },\n  media: {\n    height: 0,\n    paddingTop: '56.25%', // 16:9\n  },\n}));\n","import React from 'react';\nimport Card from '@material-ui/core/Card';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport CardContent from '@material-ui/core/CardContent';\nimport Typography from '@material-ui/core/Typography';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport constants from '../utils/constants';\nimport {\n  cardStyles\n} from './styles';\n\nfunction DashboardTile(props) {\n  const {\n    launchData: {\n      flight_number,\n      details,\n      launch_date_unix,\n      launch_success,\n      mission_name,\n      links: {\n        flickr_images\n      }\n    }\n  } = props;\n\n  const {\n    FLIGHT_NUMBER,\n    LAUNCH_DATE,\n    LAUNCH_STATUS,\n    DEFAULT_IMG_URL,\n    SUCCESS,\n    FAILURE\n  } = constants\n  const classes = cardStyles();\n\n\n  let subHeader = <div>\n    <div>\n      {FLIGHT_NUMBER}: {flight_number}\n    </div>\n    <div>\n      {LAUNCH_DATE}: {launch_date_unix}\n    </div>\n    <div>\n      {LAUNCH_STATUS}: {launch_success ? SUCCESS : FAILURE}\n    </div>\n  </div>;\n\n  return (<div className={classes.cardContainer}>\n    <Card className={classes.root}>\n      <CardHeader\n        title={mission_name}\n        subheader={subHeader}\n      />\n\n      <CardMedia\n        className={classes.media}\n        image={flickr_images[0] || DEFAULT_IMG_URL}\n        title={mission_name}\n      />\n      <CardContent>\n        <Typography variant='body2' color='textSecondary' component='p'>\n          {details}\n        </Typography>\n      </CardContent>\n    </Card>\n  </div>\n  );\n}\n\nexport default DashboardTile;","\nimport React, { Component } from 'react';\nimport DashboardTile from './DashboardTile';\n\nexport default class DashboardComponent extends Component {\n  constructor(props) {\n    super(props);\n  }\n  componentDidMount() {\n    this.props.getLaunchData();\n  }\n  render() {\n    const {\n      launches\n    } = this.props;\n    console.log('launches', launches)\n    return (\n      <div className='App'>\n        <h1>SpaceX Launches</h1>\n        {\n          launches.map(launch => <DashboardTile launchData={launch}/>)\n        }\n        \n      </div>\n    );\n  }\n}\n\n\n\n// export default App;\n","import { connect } from 'react-redux';\nimport { getLaunches } from './duck/operations';\nimport DashboardComponent from './DashboardComponent';\n\nconst mapStateToProps = (state) => {\n  const {\n    count,\n    launches\n  } = state.dashoard;\n\n  return {\n    count,\n    launches\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    getLaunchData: () => dispatch(getLaunches())\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(DashboardComponent);\n","import {\n  fetchLaunchData\n} from './reduxSlice';\n\nexport const getLaunches = () => (dispatch) => {\n  fetch('https://api.spacexdata.com/v3/launches')\n    .then(response => response.json())\n    .then(data => dispatch(fetchLaunchData(data)))\n    .catch(error => {\n      console.error(error);\n    });\n};\n\n","\nimport React from 'react';\nimport DashboardContainer from './dashboard/DashboardContainer';\nimport './styles.css';\n\nfunction App() {\n  return (\n    <div className='App'>\n      <DashboardContainer />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { configureStore } from '@reduxjs/toolkit';\nimport dashoardReducer from './dashboard/duck/reduxSlice';\n\nexport default configureStore({\n  reducer: {\n    dashoard: dashoardReducer\n  },\n})","import React, {StrictMode} from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux';\nimport store from './reduxStore';\n\nReactDOM.render(\n  <StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}